// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4097.DeepSpace.subsystems;


import java.util.Dictionary;

import org.usfirst.frc4097.DeepSpace.Robot;
import org.usfirst.frc4097.DeepSpace.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardComponent;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class GrabberArm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private VictorSP pivotMotorUpper;
    private VictorSP pivotMotorLower;
    private AnalogPotentiometer upperPot;
    private AnalogPotentiometer lowerPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    double g = 0.1;
    public double lowerTarget = 0;
    public double upperTarget = 0;
    public boolean autoControl = false;
    public String presetString = "None";
    public GrabberArm() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        pivotMotorUpper = new VictorSP(0);
        addChild("pivotMotorUpper",pivotMotorUpper);
        pivotMotorUpper.setInverted(false);
        
        pivotMotorLower = new VictorSP(9);
        addChild("pivotMotorLower",pivotMotorLower);
        pivotMotorLower.setInverted(false);
        
        upperPot = new AnalogPotentiometer(0, -290.0, 265.0);
        addChild("UpperPot",upperPot);
        
        
        lowerPot = new AnalogPotentiometer(1, -290.0, 186.0);
        addChild("LowerPot",lowerPot);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    public void elbowTurn(double ry){
        //turns the motor closest to the bot frame dependent on ry
        //CURRENTLY WORKS, BUT STALLS MOTOR
        ry=0.75*ry;
        if (ry >= -g && ry <= g){
            if (lowerPot.get() >= 90){
                if (lowerPot.get() >= 110){
                    ry = 0;
                }
                else{
                    ry = -g/2;
                }
            }
            else{
                ry = g/2;
            }
        }
        else if (ry > g && lowerPot.get() >= 115 && lowerPot.get() <= 155){
            ry = 0;
        }
        pivotMotorLower.setSpeed(ry);
        //SmartDashboard.putNumber("ry", ry);
    }
    public void wristTurn(double ly){
        //does the same thing as elbowturn, but does it for the motor closest to the pivot arm
        ly=0.2*ly;
        pivotMotorUpper.setSpeed(ly);
    }
    public void stopArms(){
        pivotMotorLower.setSpeed(0.5*g);
        pivotMotorUpper.setSpeed(0);
    }

    public void goToTargetAngle(){
        double lowerAngle = lowerPot.get();
        double upperAngle = upperPot.get();
        if (autoControl){
            double speed = (lowerTarget-lowerAngle)/180;
            boolean elbowIsDone = false;
            boolean wristIsDone = false;
            if (speed < 0.25 && speed > -0.25){
                if (speed > 0){
                    speed = 0.25;
                }
                else if (speed < 0){
                    speed = -0.25;
                }
            }
            if ((lowerTarget-lowerAngle) >= 5 || (lowerTarget-lowerAngle) <= -5){
                elbowTurn(speed);
            }
            else{
                elbowIsDone = true;
            }
            if ((upperTarget-upperAngle) >= 5 || (upperTarget-upperAngle) <= -5){
                wristTurn(speed);
            }
            else{
                wristIsDone = true;
            }
            if (elbowIsDone && wristIsDone){
                autoControl = false;
                presetString = "None";
            }
        }
    }
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new GrabbyGrab());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("UpperPot", upperPot.get());
        SmartDashboard.putNumber("LowerPot", lowerPot.get());
        SmartDashboard.putBoolean("autoControl", autoControl);
        SmartDashboard.putString("preset", presetString);
        //SmartDashboard.putNumber("right stick", Robot.oi.xbox.getRawAxis(5));
        //SmartDashboard.putNumber("left stick", Robot.oi.xbox.getRawAxis(1));
        //SmartDashboard.putNumber("LowerPotVisual", lowerPot.get());
        //SmartDashboard.putNumber("UpperPotVisual", upperPot.get());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
}