// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4097.DeepSpace.subsystems;


//import javax.management.timer.Timer;

import org.usfirst.frc4097.DeepSpace.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.Timer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class SpaceVaccuum extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private VictorSP propeller;
    private Servo servo1;
    private Servo servo2;
    private Servo servo4;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    boolean suckStatus = true;
    boolean fanstatus = false;

    //rampup params
    double rampUpTime = .5; //in secs
    double rampUpMaxSpeed = .9; //out of 0-1
    double rampUpIncrementValue = (0.02/rampUpTime)*rampUpMaxSpeed;

    //servo overshoot params
    Timer tick =new Timer();

    public SpaceVaccuum() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        propeller = new VictorSP(6);
        addChild("Propeller",propeller);
        propeller.setInverted(false);
        
        servo1 = new Servo(1);
        addChild("Servo1",servo1);
        
        
        servo2 = new Servo(2);
        addChild("Servo2",servo2);
        
        
        servo4 = new Servo(4);
        addChild("Servo4",servo4);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new RawVacuum());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public boolean checkFanStatus(){
        //checks if the fan is on or off.
        return fanstatus;
        //true==on
    }

    public boolean shouldBlowHarder(){
        return propeller.getSpeed() < rampUpMaxSpeed;
    }
    public boolean checkSuckStatus(){
        return suckStatus;
    }
    public void suckRing(){
        //code pending, needs to suck in ring, blow out ball
        suckStatus=true;
        //start==open
        //end=closed
        //if (tick.get() <= overShootDelay) {
            servo1.setAngle(142);
            servo2.setAngle(50);
            //servo3.setAngle(50);
            servo4.setAngle(135);
        //} else {//normal vals
            Timer.delay(1);
            servo1.setAngle(137);
            servo2.setAngle(55);
            //servo3.setAngle(50);
            //angles for servos 1 and 2 approved
            servo4.setAngle(128);
        //}
    }

    public void suckBall(){
        //does the opposite of suckRing
        suckStatus=false;
        //if (tick.get() <= overShootDelay){
            servo1.setAngle(44);
            servo2.setAngle(144);
            //servo3.setAngle(135);
            servo4.setAngle(30);
        //} else {//normal vals
            Timer.delay(1);
            //servos 1 and 2 approved here as well
            servo1.setAngle(49);
            servo2.setAngle(139);
            //servo3.setAngle(135);
            servo4.setAngle(37);
        //}
        
    }
    /*
    public void suckRing(){
        //code pending, needs to suck in ring, blow out ball
        suckStatus=true;
        //start==open
        //end=closed
        servo1.setAngle(135);//Daniwuw aproved
        servo2.setAngle(57);//Daniwuw aproved
        servo3.setAngle(50);
        servo4.setAngle(50);
    }

    public void suckBall(){
        //does the opposite of suckRing
        suckStatus=false;
        servo1.setAngle(47);//Daniwuw aproved
        servo2.setAngle(145);//Daniwuw aproved
        servo3.setAngle(135);
        servo4.setAngle(135);
    }
    */
    public void turnIt(){
        //if the fan is on, turns it off. else, turns it on.
        if (checkFanStatus()){
            turnitOff();
        }
        else{
            //note:the motors are probably not like this
            //propeller.setSpeed(0.75);
            fanstatus=true;
            /*if (checkSuckStatus()){
                suckRing();
            }
            else{
                suckBall();
            }*/
        }
    }
    public void turnitOff(){
        propeller.setSpeed(0);
        fanstatus=false;
    }

    public void rampUp(){
        propeller.setSpeed(propeller.getSpeed()+rampUpIncrementValue);
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putBoolean("fanstatus", fanstatus);
        if (suckStatus){
            SmartDashboard.putString("suckStatus","sucking hatch");
        }
        else{
            SmartDashboard.putString("suckStatus","sucking ball");
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

